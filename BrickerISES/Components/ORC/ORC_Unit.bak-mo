within BrickerISES.Components.ORC;
model ORC_Unit
  extends Icons.ORC_unit;
  import Modelica.SIunits;
replaceable package MediumSf =
      ThermoCycle.Media.Incompressible.IncompressibleTables.TherminolSP constrainedby
    Modelica.Media.Interfaces.PartialMedium
    "Medium model secondary fluid - Incompressible Fluid"                                                                                                     annotation (choicesAllMatching = true);
    replaceable package MediumCf = ExternalMedia.Examples.WaterCoolProp constrainedby
    Modelica.Media.Interfaces.PartialMedium "Medium model working fluid"                                                             annotation (choicesAllMatching = true);

    /******* Ports *****/
  ThermoCycle.Interfaces.Fluid.FlangeA InFlowSf( redeclare package Medium = MediumSf)
    annotation (Placement(transformation(extent={{-112,14},{-92,34}}),
        iconTransformation(extent={{-112,14},{-92,34}})));
  ThermoCycle.Interfaces.Fluid.FlangeB OutFlowSf(redeclare package Medium = MediumSf)
    annotation (Placement(transformation(extent={{-112,-46},{-92,-26}}),
        iconTransformation(extent={{-112,-46},{-92,-26}})));
ThermoCycle.Interfaces.Fluid.FlangeA InFlowCf(redeclare package Medium = MediumCf)
    annotation (Placement(transformation(extent={{32,50},{52,70}}),
        iconTransformation(extent={{32,50},{52,70}})));
ThermoCycle.Interfaces.Fluid.FlangeB OutFlowCf(  redeclare package Medium = MediumCf)
    annotation (Placement(transformation(extent={{32,-82},{52,-62}}),
        iconTransformation(extent={{32,-82},{52,-62}})));
/***** Parameters *******/
// annotation(Dialog(tab="Initialization", enable= Set_h_pf_out, group= "Primary fluid"));
parameter Modelica.SIunits.Pressure pConst;
parameter Boolean Cogen = false;
SIunits.Pressure pp "pressure secondary fluid";
SIunits.Pressure pCf "pressure cooling fluid";

/* Set thermodynamic states */
MediumSf.ThermodynamicState Sfsu = MediumSf.setState_ph(pp,h_sf_su)
    "Sfsu: Evaporator inlet";
MediumSf.ThermodynamicState Sfex = MediumSf.setState_ph(pp,h_sf_ex)
    "Sfex: Evaporator outlet";
MediumCf.ThermodynamicState Cfsu = MediumCf.setState_ph(pCf,h_cf_su)
    "Cfsu: Condenser inlet";
MediumCf.ThermodynamicState Cfex = MediumCf.setState_ph(pCf,h_cf_ex)
    "Cfex: Condenser outlet";

SIunits.MassFlowRate m_sf "Secondary fluid mass flow";
SIunits.Temperature T_sf_su "Temperature - Evaporator inlet secondary fluid ";
SIunits.Temperature T_sf_ex "Temperatyre - Evaporator outlet secondary fluid";
SIunits.SpecificEnthalpy h_sf_su
    "Specific enthalpy - Evaporator inlet secondary fluid";
SIunits.SpecificEnthalpy h_sf_ex
    "Specific enthalpy - Evaporator outlet secondary fluid";

SIunits.MassFlowRate m_cf "Cooling fluid mass flow";
SIunits.Temperature T_cf_su "Condenser inlet secondary fluid temperature";
SIunits.Temperature T_cf_ex "Condenser outlet secondary fluid temperature";
SIunits.SpecificEnthalpy h_cf_su
    "Specific enthalpy - Evaporator inlet cooling fluid";
SIunits.SpecificEnthalpy h_cf_ex
    "Specific enthalpy - Evaporator outlet cooling fluid";

SIunits.Power Pel_gross "Electrical power generated by the ORC Unit - Rank";
SIunits.Power Pth_SfRank "Thermal power of evaporator secondary fluid - Rank";
SIunits.Power Pth_CfRank "Thermal power of condenser secondary fluid - Rank";

equation
  T_sf_su = MediumSf.temperature(Sfsu);
  T_sf_ex = -48.022193 + (1.374736)*T_sf_su - (0.33243)*T_cf_su + (-0.002356)*T_sf_su^2 + (0.000233)*T_cf_su^2 + (0.003018)*T_sf_su*T_cf_su;           /*from Rank */
  h_sf_ex = MediumSf.specificEnthalpy(Sfex);

  T_cf_su = MediumCf.temperature(Cfsu);
  T_cf_ex = (8.4621) +  T_sf_su*(-0.062779) + T_cf_su*(1.033827) + (0.000313)*T_sf_su^2+ (-0.000114)*T_cf_su^2 + (-0.000238)*T_sf_su*T_cf_su;        /*from Rank */
  h_cf_ex = MediumCf.specificEnthalpy(Cfex);

  Pel_gross= +(81.754827) +T_sf_su*(-0.87123)+T_cf_su*(0.175195) +  (0.003924)*T_sf_su^2 + (-0.007916)*T_cf_su^2 +(-0.001025)*T_sf_su*T_cf_su;    /*from Rank */

  Pth_SfRank=  +(306.323045) + T_sf_su*(-2.517441) + T_cf_su*(2.21122) + (0.015414)*T_sf_su^2 + (-0.001464)*T_cf_su^2 + (-0.019486)*T_sf_su*T_cf_su;  /*from Rank */

  Pth_CfRank= (206.758388) +T_sf_su*(-1.357793)+T_cf_su*(1.229036)+  (0.009504)*T_sf_su^2 + (-0.003517)*T_cf_su^2 + (-0.009537)*T_sf_su*T_cf_su; /*from Rank */

  //Pth_sf=
  //Pth_cf=

//   fluidState = Medium.setState_ph(pp,h_oil_su);
//   if Cogen then
//    P_el = 60*1E03;
//   else
//    P_el = (1.75*T_oil_su - 806.76)*1E03;
//   end if;

/* Boundaries and connections */
m_sf = InFlowSf.m_flow;
m_sf = -OutFlowSf.m_flow;

pp = InFlowSf.p;
pp = OutFlowSf.p;

h_sf_su = InFlowSf.h_outflow;
h_sf_su  = inStream(InFlowSf.h_outflow);
h_sf_ex = OutFlowSf.h_outflow;

m_cf = InFlowCf.m_flow;
m_cf = -OutFlowCf.m_flow;

pCf = InFlowCf.p;
pCf = OutFlowCf.p;

h_cf_su = InFlowCf.h_outflow;
h_cf_su  = inStream(InFlowCf.h_outflow);
h_cf_ex = OutFlowCf.h_outflow;

  annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
            -100},{40,80}}),
                        graphics={
        Text(
          extent={{-102,22},{-56,12}},
          lineColor={255,0,0},
          fontSize=47,
          textString="Sfsu"),
        Text(
          extent={{-6,60},{40,50}},
          lineColor={0,0,255},
          fontSize=45,
          textString="Cfsu"),
        Text(
          extent={{-2,-52},{44,-62}},
          lineColor={0,0,255},
          fontSize=44,
          textString="Cfex"),
        Text(
          extent={{-106,-46},{-60,-56}},
          lineColor={255,0,0},
          fontSize=46,
          textString="Sfex")}),    Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{40,100}}),  graphics));
end ORC_Unit;
